{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Implementation of secp256r1 verification and recovery functions. The secp256r1 curve (also known as P256) is a NIST standard curve with wide support in modern devices and cryptographic standards. Some notable examples include Apple's Secure Enclave and Android's Keystore as well as authentication protocols like FIDO2. Based on the original https://github.com/itsobvioustech/aa-passkeys-wallet/blob/d3d423f28a4d8dfcb203c7fa0c47f42592a7378e/src/Secp256r1.sol[implementation of itsobvioustech] (GNU General Public License v3.0). Heavily inspired in https://github.com/maxrobot/elliptic-solidity/blob/c4bb1b6e8ae89534d8db3a6b3a6b52219100520f/contracts/Secp256r1.sol[maxrobot] and https://github.com/tdrerup/elliptic-curve-solidity/blob/59a9c25957d4d190eff53b6610731d81a077a15e/contracts/curves/EllipticCurve.sol[tdrerup] implementations. _Available since v5.1._",
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"A": {
					"details": "A parameter of the weierstrass equation"
				},
				"B": {
					"details": "B parameter of the weierstrass equation"
				},
				"GX": {
					"details": "Generator (x component)"
				},
				"GY": {
					"details": "Generator (y component)"
				},
				"HALF_N": {
					"details": "N/2 for excluding higher order `s` values"
				},
				"N": {
					"details": "N (order of G)"
				},
				"P": {
					"details": "P (size of the field)"
				},
				"P1DIV4": {
					"details": "(P + 1) / 4. Useful to compute sqrt"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"lib/openzeppelin-contracts/contracts/utils/cryptography/P256.sol": "P256"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
			"keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
				"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/cryptography/P256.sol": {
			"keccak256": "0x88c54d9537016a9c0af742fe9d6303e5b9ef76946866296382f62a34875d06e7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ffdc3422a88fdf71693a139af52f9a7c4e92cb9d2db1002a23c643dbbab1b42f",
				"dweb:/ipfs/Qma2hbbigJBetFACyFxwyakzHHLnP7T2kztKxXyNHtcFLR"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		}
	},
	"version": 1
}